[ { "title": "Unity DOTS 무작정 따라해보기!", "url": "/posts/Unity-DOTS/", "categories": "Unity, DOTS", "tags": "", "date": "2022-12-14 00:00:00 +0900", "snippet": "Unity ECS 실습참고자료 https://docs.unity3d.com/Packages/com.unity.entities@1.0/manual/index.html https://www.youtube.com/watch?v=H7zAORa3Ux0준비물 Unity 2022.2.0b16 PackageManager 설치 com.unity.entities (1.0.0-exp.12) com.unity.entities.graphics (1.00-exp.14) Project Settings 설정 Editor → Enter Play Mode Settings → Enter Play Mode Opertion, Disable Scene Backup 체크 Player → Other Settings → Configuration Scripting Backend → IL2CPP Api Compatibility Level → .Net FrameWork 설정 Scripting Define Symbol → ENABLE_TRANSFORM_V1 추가 서브씬 생성 선택된 씬에서 써브씬 생성함 써브신에서 Entity System 관련 코드들이 작동해야함 Hierarchy - + - Create - New Sub Scene - 원하는 위치에 생성ECS 1.0IComponentData// Speed.csusing Unity.Entities;public struct Speed : IComponentData{\tpublic float Value;}Authoring &amp; Baker// SpeedAuthoring.csusing Unity.Entities;using UnityEngine;public class SpeedAuthoring : MonoBehaviour{ public float Value;}public class SpeedBaker : Baker&lt;SpeedAuthoring&gt;{ public override void Bake(SpeedAuthoring authoring) { AddComponent(new Speed { Value = authoring.Value }); }}기본 사용법 서브씬에 게임 오브젝트를 생성한 뒤 SpeedAuthoring.cs 를 컴포넌트에 추가한다 이렇게 보면 기존과 별다르지 않지만, Inspector 창 우측 상단에 자물쇠 아이콘 외쪽에 동그라미 버튼이 있을것이다. 클릭 → Runtime 으로 변경하면 Inspector 창이 변경되는걸 볼 수 있습니다.SystemBase Class - Managed Simpler, runs on main thread, canot use Burst 아래에 코드를 작성한 뒤 실행을 하면 움직이는걸 볼 수 있습니다.// MovingSystemBase.cs// partial 필수!!!using Unity.Entities;using Unity.Mathematics;using Unity.Transforms;public partial class MovingSystemBase : SystemBase{ protected override void OnUpdate() { foreach (TransformAspect transformAspect in SystemAPI.Query&lt;TransformAspect&gt;()) { transformAspect.Position += new float3(SystemAPI.Time.DeltaTime, 0, 0); } }} Windows - Entities - Systems - 확인 가능ISystem Struct - Unmanaged Can use Burst, extremely fast but slightly more complex이동 목적지 설정하기// TargetPosition.csusing Unity.Entities;using Unity.Mathematics;public struct TargetPosition : IComponentData{ public float3 Value;}// TargetPositionAuthoring.csusing Unity.Entities;using Unity.Mathematics;using UnityEngine;public class TargetPositionAuthoring : MonoBehaviour{ public float3 Value;}public class TargetPositionBaker : Baker&lt;TargetPositionAuthoring&gt;{ public override void Bake(TargetPositionAuthoring authoring) { AddComponent(new TargetPosition { Value = authoring.Value, }); }}// MovingSystemBase.cs 수정// RefRO -&gt; ReadOnly// RefRW -&gt; Read/Writeusing Unity.Entities;using Unity.Mathematics;using Unity.Transforms;public partial class MovingSystemBase : SystemBase{ protected override void OnUpdate() { foreach ((TransformAspect transformAspect, RefRO&lt;Speed&gt; speed, RefRW&lt;TargetPosition&gt; targetPosition) in SystemAPI.Query&lt;TransformAspect, RefRO&lt;Speed&gt;, RefRW&lt;TargetPosition&gt;&gt;()) { // Calculate dir float3 direction = math.normalize(targetPosition.ValueRW.Value - transformAspect.Position); // Move transformAspect.Position += direction * SystemAPI.Time.DeltaTime * speed.ValueRO.Value; } }} 해당 컴포넌트를 추가 한뒤 값을 설정해주고 실행을 해보면 설정한 스피드로 목적지까지 가는걸 확인합니다.IAsect을 활용하여 랜덤하게 이동해보기 https://docs.unity3d.com/Packages/com.unity.entities@1.0/manual/aspects-create.html// MovingSystemBase.cs 수정using Unity.Entities;public partial class MovingSystemBase : SystemBase{ protected override void OnUpdate() { RefRW&lt;RandomComponent&gt; randomComponent = SystemAPI.GetSingletonRW&lt;RandomComponent&gt;(); foreach (MoveToPositionAspect moveToPositionAspect in SystemAPI.Query&lt;MoveToPositionAspect&gt;()) { moveToPositionAspect.Move(SystemAPI.Time.DeltaTime, randomComponent); } }}// MovoToPositionAspect.csusing Unity.Entities;using Unity.Mathematics;using Unity.Transforms;public readonly partial struct MoveToPositionAspect : IAspect{ private readonly Entity _entity; private readonly TransformAspect _transformAspect; private readonly RefRO&lt;Speed&gt; _speed; private readonly RefRW&lt;TargetPosition&gt; _targetPosition; public void Move(float deltaTime, RefRW&lt;RandomComponent&gt; randomComponent) { // Calculate dir float3 direction = math.normalize(_targetPosition.ValueRW.Value - _transformAspect.Position); // Move _transformAspect.Position += direction * deltaTime * _speed.ValueRO.Value; float reachedTargetDistance = .5f; if (math.distance(_transformAspect.Position, _targetPosition.ValueRW.Value) &lt; reachedTargetDistance) { // Generate new random target position _targetPosition.ValueRW.Value = GetRandomPosition(randomComponent); } } private float3 GetRandomPosition(RefRW&lt;RandomComponent&gt; randomComponent) { return new float3( randomComponent.ValueRW.Random.NextFloat(0f, 15f), 0, randomComponent.ValueRW.Random.NextFloat(0f, 15f) ); }}// RancomComponent.csusing Unity.Entities;public struct RandomComponent : IComponentData{ public Unity.Mathematics.Random Random;}// RandomAuthoring.csusing Unity.Entities;using UnityEngine;public class RandomAuthoring : MonoBehaviour{}public class RandomBaker : Baker&lt;RandomAuthoring&gt;{ public override void Bake(RandomAuthoring authoring) { AddComponent(new RandomComponent { Random = new Unity.Mathematics.Random(1) }); }} 위처럼 구성한 뒤 실행 해보면 랜덤하게 이동하는걸 확인 할 수 있다.ISystem, JobSystem을 활용해보자!(+BurstCompile)// MovingSystem.cs 수정using Unity.Burst;using Unity.Collections.LowLevel.Unsafe;using Unity.Entities;using Unity.Jobs;[BurstCompile]public partial struct MovingISystem : ISystem{ [BurstCompile] public void OnCreate(ref SystemState state) { } [BurstCompile] public void OnDestroy(ref SystemState state) { } [BurstCompile] public void OnUpdate(ref SystemState state) { RefRW&lt;RandomComponent&gt; randomComponent = SystemAPI.GetSingletonRW&lt;RandomComponent&gt;(); float deltaTime = SystemAPI.Time.DeltaTime; JobHandle jobHandle = new MoveJob { DeltaTime = deltaTime }.ScheduleParallel(state.Dependency); jobHandle.Complete(); new TestReachedTargetPositionJob { RandomComponent = randomComponent }.Run(); }}[BurstCompile]public partial struct MoveJob : IJobEntity{ public float DeltaTime; public void Execute(MoveToPositionAspect moveToPositionAspect) { moveToPositionAspect.Move(DeltaTime); }}[BurstCompile]public partial struct TestReachedTargetPositionJob : IJobEntity{ [NativeDisableUnsafePtrRestriction] public RefRW&lt;RandomComponent&gt; RandomComponent; public void Execute(MoveToPositionAspect moveToPositionAspect) { moveToPositionAspect.TestReachedTargetPosition(RandomComponent); }}// MoveToPositionAspect.cs 수정using Unity.Entities;using Unity.Mathematics;using Unity.Transforms;public readonly partial struct MoveToPositionAspect : IAspect{ private readonly Entity _entity; private readonly TransformAspect _transformAspect; private readonly RefRO&lt;Speed&gt; _speed; private readonly RefRW&lt;TargetPosition&gt; _targetPosition; public void Move(float deltaTime) { // Calculate dir float3 direction = math.normalize(_targetPosition.ValueRW.Value - _transformAspect.Position); // Move _transformAspect.Position += direction * deltaTime * _speed.ValueRO.Value; } public void TestReachedTargetPosition(RefRW&lt;RandomComponent&gt; randomComponent) { float reachedTargetDistance = .5f; if (math.distance(_transformAspect.Position, _targetPosition.ValueRW.Value) &lt; reachedTargetDistance) { // Generate new random target position _targetPosition.ValueRW.Value = GetRandomPosition(randomComponent); } } private float3 GetRandomPosition(RefRW&lt;RandomComponent&gt; randomComponent) { return new float3( randomComponent.ValueRW.Random.NextFloat(0f, 15f), 0, randomComponent.ValueRW.Random.NextFloat(0f, 15f) ); }}// MovingSystemBase.cs 수정using Unity.Entities;public partial class MovingSystemBase : SystemBase{ protected override void OnUpdate() { RefRW&lt;RandomComponent&gt; randomComponent = SystemAPI.GetSingletonRW&lt;RandomComponent&gt;(); foreach (MoveToPositionAspect moveToPositionAspect in SystemAPI.Query&lt;MoveToPositionAspect&gt;()) { moveToPositionAspect.Move(SystemAPI.Time.DeltaTime); moveToPositionAspect.TestReachedTargetPosition(randomComponent); } }} 프로파일링 해봅시다~!- 확인완료!스트레스 테스트를 진행해보자!// PlayerSpawnerComponent.csusing Unity.Entities;public struct PlayerSpawnerComponent : IComponentData{ public Entity PlayerPrefab;}// PlayerSpawnerAuthoring.csusing Unity.Entities;using UnityEngine;public class PlayerSpawnerAuthoring : MonoBehaviour{ public GameObject PlayerPrefab;}public class PlayerSpawnerBaker : Baker&lt;PlayerSpawnerAuthoring&gt;{ public override void Bake(PlayerSpawnerAuthoring authoring) { AddComponent(new PlayerSpawnerComponent { PlayerPrefab = GetEntity(authoring.PlayerPrefab), }); }}// PlayerSpawnerSystem.csusing Unity.Entities;public partial class PlayerSpawnerSystem : SystemBase{ protected override void OnUpdate() { EntityQuery playerEntityQuery = EntityManager.CreateEntityQuery(typeof(PlayerTag)); PlayerSpawnerComponent playerSpawnerComponent = SystemAPI.GetSingleton&lt;PlayerSpawnerComponent&gt;(); RefRW&lt;RandomComponent&gt; randomComponent = SystemAPI.GetSingletonRW&lt;RandomComponent&gt;(); EntityCommandBuffer entityCommandBuffer = SystemAPI.GetSingleton&lt;BeginSimulationEntityCommandBufferSystem.Singleton&gt;() .CreateCommandBuffer(World.Unmanaged); int spawnAmount = 30000; if (playerEntityQuery.CalculateEntityCount() &lt; spawnAmount) { // EntityManager.Instantiate(playerSpawnerComponent.PlayerPrefab); Entity spawnEntity = entityCommandBuffer.Instantiate(playerSpawnerComponent.PlayerPrefab); entityCommandBuffer.SetComponent(spawnEntity, new Speed { Value = randomComponent.ValueRW.Random.NextFloat(1f, 5f) }); } }}// PlayerTag.csusing Unity.Entities;public struct PlayerTag : IComponentData{}// PlayerTagAuthoring.csusing Unity.Entities;using UnityEngine;public class PlayerTagAuthoring : MonoBehaviour{}public class PlayerTagBaker : Baker&lt;PlayerTagAuthoring&gt;{ public override void Bake(PlayerTagAuthoring authoring) { AddComponent(new PlayerTag()); }}음,,, 뭔가 기대 이상은 아닌것같은데,,,,무빙에 관련하는 부분이 2곳이 있는것 같은데 Moving System Base 를 꺼보자오,,,? 이제서야 뭔가 원하는 프레임이 나온듯하다간단한 예제를 사용하며 따라해보았으니기능들에 대해서 알아가는 시간을 가져야겠습니다." }, { "title": "두번째", "url": "/posts/Seconds/", "categories": "Test, Test3", "tags": "", "date": "2022-11-21 00:00:00 +0900", "snippet": "카테고리 테스트중" }, { "title": "카테고리 테스트", "url": "/posts/first/", "categories": "Test, Test2", "tags": "", "date": "2022-09-04 00:00:00 +0900", "snippet": "포스팅 테스트얏호public class Test{ void Method() { }}" } ]
